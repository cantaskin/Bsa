// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Contexts;

#nullable disable

namespace Persistence.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    [Migration("20241106094057_FirstMigration")]
    partial class FirstMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ArtistLanguage", b =>
                {
                    b.Property<Guid>("ArtistsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguagesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ArtistsId", "LanguagesId");

                    b.HasIndex("LanguagesId");

                    b.ToTable("ArtistLanguage");
                });

            modelBuilder.Entity("Domain.Entities.AiVoiceProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtistId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid?>("DemoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LanguageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int>("ProjectSelection")
                        .HasColumnType("int")
                        .HasColumnName("ProjectSelection");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.Property<Guid>("UsageRightId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UsageRightId");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("DemoId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UsageRightId");

                    b.ToTable("AiVoiceProjects", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Artist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("Gender")
                        .HasColumnType("int")
                        .HasColumnName("Gender");

                    b.Property<float>("InstAiUnitPrice")
                        .HasColumnType("real")
                        .HasColumnName("InstAiUnitPrice");

                    b.Property<string>("InstVoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("MailAddress");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("PhotoUrl");

                    b.Property<float>("ProfAiUnitPrice")
                        .HasColumnType("real")
                        .HasColumnName("ProfAiUnitPrice");

                    b.Property<string>("ProfVoiceId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("RealVoiceStampPrice")
                        .HasColumnType("real")
                        .HasColumnName("RealVoiceStampPrice");

                    b.Property<Guid>("ToneCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ToneCategoryId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserName");

                    b.Property<string>("YoutubeVideosUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("YoutubeAddress");

                    b.HasKey("Id");

                    b.HasIndex("ToneCategoryId");

                    b.ToTable("Artists", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("13417965-92da-4b66-b1b6-492a26115ae0"),
                            CreatedDate = new DateTime(2024, 11, 6, 9, 40, 57, 537, DateTimeKind.Utc).AddTicks(5700),
                            Gender = 2,
                            InstAiUnitPrice = 100f,
                            MailAddress = "artist1@example.com",
                            ProfAiUnitPrice = 150f,
                            RealVoiceStampPrice = 200f,
                            ToneCategoryId = new Guid("6b735582-018e-4d47-b3be-b4bc30411716"),
                            UserName = "Artist_1"
                        },
                        new
                        {
                            Id = new Guid("0dcf85c3-684c-4c3f-b44e-c1dd3f5e8b11"),
                            CreatedDate = new DateTime(2024, 11, 6, 9, 40, 57, 537, DateTimeKind.Utc).AddTicks(5748),
                            Gender = 1,
                            InstAiUnitPrice = 105f,
                            MailAddress = "artist2@example.com",
                            ProfAiUnitPrice = 155f,
                            RealVoiceStampPrice = 205f,
                            ToneCategoryId = new Guid("a4498d12-306c-4e45-9f22-259145662794"),
                            UserName = "Artist_2"
                        },
                        new
                        {
                            Id = new Guid("363759b7-cd5f-4e3d-b9d3-9c4b9bdcebee"),
                            CreatedDate = new DateTime(2024, 11, 6, 9, 40, 57, 537, DateTimeKind.Utc).AddTicks(5751),
                            Gender = 2,
                            InstAiUnitPrice = 110f,
                            MailAddress = "artist3@example.com",
                            ProfAiUnitPrice = 160f,
                            RealVoiceStampPrice = 210f,
                            ToneCategoryId = new Guid("9573dbf0-d69a-4dfb-86c5-83cf863e4055"),
                            UserName = "Artist_3"
                        },
                        new
                        {
                            Id = new Guid("6ec4c059-bba1-4101-9fa0-52a2dbe002a6"),
                            CreatedDate = new DateTime(2024, 11, 6, 9, 40, 57, 537, DateTimeKind.Utc).AddTicks(5754),
                            Gender = 1,
                            InstAiUnitPrice = 115f,
                            MailAddress = "artist4@example.com",
                            ProfAiUnitPrice = 165f,
                            RealVoiceStampPrice = 215f,
                            ToneCategoryId = new Guid("75f62356-5710-4166-b77e-a9ec54367be8"),
                            UserName = "Artist_4"
                        },
                        new
                        {
                            Id = new Guid("4770172e-3ef9-467a-b159-08d58c02a83b"),
                            CreatedDate = new DateTime(2024, 11, 6, 9, 40, 57, 537, DateTimeKind.Utc).AddTicks(5757),
                            Gender = 2,
                            InstAiUnitPrice = 120f,
                            MailAddress = "artist5@example.com",
                            ProfAiUnitPrice = 170f,
                            RealVoiceStampPrice = 220f,
                            ToneCategoryId = new Guid("6b735582-018e-4d47-b3be-b4bc30411716"),
                            UserName = "Artist_5"
                        });
                });

            modelBuilder.Entity("Domain.Entities.ArtistUsageRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtistId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<float>("PriceRate")
                        .HasColumnType("real")
                        .HasColumnName("PriceRate");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UsageRightId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UsageRightId");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("UsageRightId");

                    b.ToTable("ArtistUsageRights", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Blog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("BlogCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("BlogCategoryId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("ThumbnailUrl")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ThumbnailUrl");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Title");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int")
                        .HasColumnName("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryId");

                    b.ToTable("Blogs", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.BlogCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("BlogCategories", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8a96e21-d23f-4f4a-8a57-2c0c676b5e1f"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Belgesel"
                        },
                        new
                        {
                            Id = new Guid("ab3a1c2d-9f84-4d9f-a0fc-80bbd6c4c8fe"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Jingle"
                        },
                        new
                        {
                            Id = new Guid("13417965-92da-4b66-b1b6-492a26115ae0"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Dublaj"
                        },
                        new
                        {
                            Id = new Guid("6c9a3e06-9ccb-4ffd-8708-0f635e64244e"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Reklam"
                        },
                        new
                        {
                            Id = new Guid("90b35700-2942-478d-b40d-3b52ffcc4494"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Santral"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Demo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtistId");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LanguageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Demoes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("28e545c9-ea54-4aa5-837c-2dc018eced08"),
                            ArtistId = new Guid("13417965-92da-4b66-b1b6-492a26115ae0"),
                            CategoryId = new Guid("6c9a3e06-9ccb-4ffd-8708-0f635e64244e"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = new Guid("2f608f15-f672-4f88-989f-21eeb522e931"),
                            Name = "Demo Track 1",
                            Url = "https://example.com/demo1"
                        },
                        new
                        {
                            Id = new Guid("0cf973bc-db17-4942-ac33-c2bddc19552c"),
                            ArtistId = new Guid("0dcf85c3-684c-4c3f-b44e-c1dd3f5e8b11"),
                            CategoryId = new Guid("90b35700-2942-478d-b40d-3b52ffcc4494"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = new Guid("b466599c-338b-4b0f-b908-2bd388575dc5"),
                            Name = "Demo Track 2",
                            Url = "https://example.com/demo2"
                        },
                        new
                        {
                            Id = new Guid("4da22fb6-20ab-42d4-9cf8-b7e9f6ed193b"),
                            ArtistId = new Guid("363759b7-cd5f-4e3d-b9d3-9c4b9bdcebee"),
                            CategoryId = new Guid("b8a96e21-d23f-4f4a-8a57-2c0c676b5e1f"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = new Guid("69dd6dfd-9cc6-43ba-a24a-bde4f3452b73"),
                            Name = "Demo Track 3",
                            Url = "https://example.com/demo3"
                        },
                        new
                        {
                            Id = new Guid("0eca32e6-dde1-42fe-b2ba-d0574fb88d11"),
                            ArtistId = new Guid("363759b7-cd5f-4e3d-b9d3-9c4b9bdcebee"),
                            CategoryId = new Guid("13417965-92da-4b66-b1b6-492a26115ae0"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = new Guid("05bcb769-f369-4231-a78c-18ccbb7648da"),
                            Name = "Demo Track 4",
                            Url = "https://example.com/demo4"
                        },
                        new
                        {
                            Id = new Guid("21393d6a-8d53-4a1a-a96c-9b41e5f867ab"),
                            ArtistId = new Guid("4770172e-3ef9-467a-b159-08d58c02a83b"),
                            CategoryId = new Guid("ab3a1c2d-9f84-4d9f-a0fc-80bbd6c4c8fe"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageId = new Guid("f8f7d383-d887-4034-9352-90143afc1a8a"),
                            Name = "Demo Track 5",
                            Url = "https://example.com/demo5"
                        });
                });

            modelBuilder.Entity("Domain.Entities.EmailAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("ActivationKey")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ActivationKey");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("IsVerified");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("EmailAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("LanguageCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("Languages", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2f608f15-f672-4f88-989f-21eeb522e931"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "en",
                            Name = "İngilizce"
                        },
                        new
                        {
                            Id = new Guid("b466599c-338b-4b0f-b908-2bd388575dc5"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "es",
                            Name = "İspanyolca"
                        },
                        new
                        {
                            Id = new Guid("69dd6dfd-9cc6-43ba-a24a-bde4f3452b73"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "fr",
                            Name = "Fransızca"
                        },
                        new
                        {
                            Id = new Guid("05bcb769-f369-4231-a78c-18ccbb7648da"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "de",
                            Name = "Almanca"
                        },
                        new
                        {
                            Id = new Guid("f8f7d383-d887-4034-9352-90143afc1a8a"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "ja",
                            Name = "Japonca"
                        },
                        new
                        {
                            Id = new Guid("8151ab74-7b00-4d3e-8fde-af3a394404b3"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "tr",
                            Name = "Türkçe"
                        },
                        new
                        {
                            Id = new Guid("e26b8af8-b70c-4482-ba89-5737a7bac3a8"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "it",
                            Name = "İtalyanca"
                        },
                        new
                        {
                            Id = new Guid("5c69a048-a67b-4cb8-a3ef-3766c7f40b5a"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "ar",
                            Name = "Arapça"
                        },
                        new
                        {
                            Id = new Guid("75264907-d0d8-4de5-9883-83dbcf40e9ce"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "ru",
                            Name = "Rusça"
                        },
                        new
                        {
                            Id = new Guid("aefcbc93-2a8e-408f-918f-b6e1f9666e6f"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LanguageCode = "zh",
                            Name = "Çince"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auth.Admin"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auth.Read"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auth.Write"
                        },
                        new
                        {
                            Id = 5,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Auth.RevokeToken"
                        },
                        new
                        {
                            Id = 6,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Admin"
                        },
                        new
                        {
                            Id = 7,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Read"
                        },
                        new
                        {
                            Id = 8,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Write"
                        },
                        new
                        {
                            Id = 9,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Create"
                        },
                        new
                        {
                            Id = 10,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Update"
                        },
                        new
                        {
                            Id = 11,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "OperationClaims.Delete"
                        },
                        new
                        {
                            Id = 12,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Admin"
                        },
                        new
                        {
                            Id = 13,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Read"
                        },
                        new
                        {
                            Id = 14,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Write"
                        },
                        new
                        {
                            Id = 15,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Create"
                        },
                        new
                        {
                            Id = 16,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Update"
                        },
                        new
                        {
                            Id = 17,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UserOperationClaims.Delete"
                        },
                        new
                        {
                            Id = 18,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Admin"
                        },
                        new
                        {
                            Id = 19,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Read"
                        },
                        new
                        {
                            Id = 20,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Write"
                        },
                        new
                        {
                            Id = 21,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Create"
                        },
                        new
                        {
                            Id = 22,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Update"
                        },
                        new
                        {
                            Id = 23,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Users.Delete"
                        },
                        new
                        {
                            Id = 24,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Artists.Admin"
                        },
                        new
                        {
                            Id = 25,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Artists.Read"
                        },
                        new
                        {
                            Id = 26,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Artists.Write"
                        },
                        new
                        {
                            Id = 27,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Artists.Create"
                        },
                        new
                        {
                            Id = 28,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Artists.Update"
                        },
                        new
                        {
                            Id = 29,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Artists.Delete"
                        },
                        new
                        {
                            Id = 30,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Categories.Admin"
                        },
                        new
                        {
                            Id = 31,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Categories.Read"
                        },
                        new
                        {
                            Id = 32,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Categories.Write"
                        },
                        new
                        {
                            Id = 33,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Categories.Create"
                        },
                        new
                        {
                            Id = 34,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Categories.Update"
                        },
                        new
                        {
                            Id = 35,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Categories.Delete"
                        },
                        new
                        {
                            Id = 36,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Demoes.Admin"
                        },
                        new
                        {
                            Id = 37,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Demoes.Read"
                        },
                        new
                        {
                            Id = 38,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Demoes.Write"
                        },
                        new
                        {
                            Id = 39,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Demoes.Create"
                        },
                        new
                        {
                            Id = 40,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Demoes.Update"
                        },
                        new
                        {
                            Id = 41,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Demoes.Delete"
                        },
                        new
                        {
                            Id = 42,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Languages.Admin"
                        },
                        new
                        {
                            Id = 43,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Languages.Read"
                        },
                        new
                        {
                            Id = 44,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Languages.Write"
                        },
                        new
                        {
                            Id = 45,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Languages.Create"
                        },
                        new
                        {
                            Id = 46,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Languages.Update"
                        },
                        new
                        {
                            Id = 47,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Languages.Delete"
                        },
                        new
                        {
                            Id = 48,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ToneCategories.Admin"
                        },
                        new
                        {
                            Id = 49,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ToneCategories.Read"
                        },
                        new
                        {
                            Id = 50,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ToneCategories.Write"
                        },
                        new
                        {
                            Id = 51,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ToneCategories.Create"
                        },
                        new
                        {
                            Id = 52,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ToneCategories.Update"
                        },
                        new
                        {
                            Id = 53,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "ToneCategories.Delete"
                        },
                        new
                        {
                            Id = 54,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AiVoiceProjects.Admin"
                        },
                        new
                        {
                            Id = 55,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AiVoiceProjects.Read"
                        },
                        new
                        {
                            Id = 56,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AiVoiceProjects.Write"
                        },
                        new
                        {
                            Id = 57,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AiVoiceProjects.Create"
                        },
                        new
                        {
                            Id = 58,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AiVoiceProjects.Update"
                        },
                        new
                        {
                            Id = 59,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "AiVoiceProjects.Delete"
                        },
                        new
                        {
                            Id = 60,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RealVoiceProjects.Admin"
                        },
                        new
                        {
                            Id = 61,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RealVoiceProjects.Read"
                        },
                        new
                        {
                            Id = 62,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RealVoiceProjects.Write"
                        },
                        new
                        {
                            Id = 63,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RealVoiceProjects.Create"
                        },
                        new
                        {
                            Id = 64,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RealVoiceProjects.Update"
                        },
                        new
                        {
                            Id = 65,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "RealVoiceProjects.Delete"
                        },
                        new
                        {
                            Id = 66,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UsageRights.Admin"
                        },
                        new
                        {
                            Id = 67,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UsageRights.Read"
                        },
                        new
                        {
                            Id = 68,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UsageRights.Write"
                        },
                        new
                        {
                            Id = 69,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UsageRights.Create"
                        },
                        new
                        {
                            Id = 70,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UsageRights.Update"
                        },
                        new
                        {
                            Id = 71,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "UsageRights.Delete"
                        },
                        new
                        {
                            Id = 72,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Blogs.Admin"
                        },
                        new
                        {
                            Id = 73,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Blogs.Read"
                        },
                        new
                        {
                            Id = 74,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Blogs.Write"
                        },
                        new
                        {
                            Id = 75,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Blogs.Create"
                        },
                        new
                        {
                            Id = 76,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Blogs.Update"
                        },
                        new
                        {
                            Id = 77,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Blogs.Delete"
                        },
                        new
                        {
                            Id = 78,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BlogCategories.Admin"
                        },
                        new
                        {
                            Id = 79,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BlogCategories.Read"
                        },
                        new
                        {
                            Id = 80,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BlogCategories.Write"
                        },
                        new
                        {
                            Id = 81,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BlogCategories.Create"
                        },
                        new
                        {
                            Id = 82,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BlogCategories.Update"
                        },
                        new
                        {
                            Id = 83,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "BlogCategories.Delete"
                        });
                });

            modelBuilder.Entity("Domain.Entities.OtpAuthenticator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit")
                        .HasColumnName("IsVerified");

                    b.Property<byte[]>("SecretKey")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("SecretKey");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("OtpAuthenticators", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RealVoiceProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("ArtistId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ArtistId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<Guid?>("DemoId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("DemoId");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("FileUrls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("LanguageId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("RevisionDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RevisionDescription");

                    b.Property<int>("SubmissionStatus")
                        .HasColumnType("int")
                        .HasColumnName("SubmissionStatus");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Text");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Url");

                    b.Property<Guid>("UsageRightId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UsageRightId");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.HasIndex("DemoId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UsageRightId");

                    b.ToTable("RealVoiceProjects", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CreatedByIp");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpiresDate");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReasonRevoked");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ReplacedByToken");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RevokedByIp");

                    b.Property<DateTime?>("RevokedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("RevokedDate");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Token");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.ToneCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ToneCategories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b735582-018e-4d47-b3be-b4bc30411716"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Olgun"
                        },
                        new
                        {
                            Id = new Guid("a4498d12-306c-4e45-9f22-259145662794"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Genç"
                        },
                        new
                        {
                            Id = new Guid("9573dbf0-d69a-4dfb-86c5-83cf863e4055"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Orta Yaş"
                        },
                        new
                        {
                            Id = new Guid("75f62356-5710-4166-b77e-a9ec54367be8"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Çocuk"
                        });
                });

            modelBuilder.Entity("Domain.Entities.UsageRight", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("UsageRights", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<int>("AuthenticatorType")
                        .HasColumnType("int")
                        .HasColumnName("AuthenticatorType");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Email");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef28dc14-2ff7-468c-af8c-3aa11008c90b"),
                            AuthenticatorType = 0,
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "bbibersa@gmail.com",
                            PasswordHash = new byte[] { 232, 189, 194, 109, 80, 113, 76, 49, 225, 232, 22, 152, 2, 55, 200, 233, 77, 26, 54, 84, 124, 203, 163, 77, 24, 179, 238, 209, 172, 152, 183, 210, 249, 178, 231, 23, 173, 156, 19, 247, 222, 99, 154, 196, 146, 17, 40, 137, 205, 69, 228, 233, 222, 226, 30, 176, 171, 140, 91, 40, 242, 247, 130, 215 },
                            PasswordSalt = new byte[] { 191, 44, 42, 49, 252, 91, 234, 219, 27, 176, 21, 119, 17, 123, 190, 155, 104, 186, 95, 53, 0, 83, 198, 17, 54, 121, 204, 222, 101, 115, 8, 217, 32, 55, 116, 70, 156, 9, 28, 183, 95, 155, 3, 151, 84, 166, 21, 18, 2, 86, 139, 217, 192, 228, 91, 132, 241, 141, 183, 117, 58, 231, 121, 22, 197, 217, 197, 204, 58, 217, 81, 131, 176, 43, 191, 194, 103, 227, 141, 199, 114, 159, 120, 111, 44, 235, 140, 85, 191, 195, 78, 225, 135, 58, 231, 73, 230, 49, 154, 104, 11, 193, 173, 38, 249, 59, 246, 255, 36, 69, 162, 195, 82, 87, 107, 166, 107, 51, 137, 143, 12, 121, 111, 250, 210, 143, 109, 248 },
                            UserName = ""
                        });
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("DeletedDate");

                    b.Property<int>("OperationClaimId")
                        .HasColumnType("int")
                        .HasColumnName("OperationClaimId");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UpdatedDate");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("415c4490-88f6-43b6-b09a-6957a3927bba"),
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            OperationClaimId = 1,
                            UserId = new Guid("ef28dc14-2ff7-468c-af8c-3aa11008c90b")
                        });
                });

            modelBuilder.Entity("ArtistLanguage", b =>
                {
                    b.HasOne("Domain.Entities.Artist", null)
                        .WithMany()
                        .HasForeignKey("ArtistsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Language", null)
                        .WithMany()
                        .HasForeignKey("LanguagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.AiVoiceProject", b =>
                {
                    b.HasOne("Domain.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Demo", "Demo")
                        .WithMany()
                        .HasForeignKey("DemoId");

                    b.HasOne("Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UsageRight", "UsageRight")
                        .WithMany()
                        .HasForeignKey("UsageRightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Demo");

                    b.Navigation("Language");

                    b.Navigation("UsageRight");
                });

            modelBuilder.Entity("Domain.Entities.Artist", b =>
                {
                    b.HasOne("Domain.Entities.ToneCategory", "ToneCategory")
                        .WithMany("Artists")
                        .HasForeignKey("ToneCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToneCategory");
                });

            modelBuilder.Entity("Domain.Entities.ArtistUsageRight", b =>
                {
                    b.HasOne("Domain.Entities.Artist", "Artist")
                        .WithMany("ArtistUsageRights")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UsageRight", "UsageRight")
                        .WithMany("ArtistUsageRights")
                        .HasForeignKey("UsageRightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("UsageRight");
                });

            modelBuilder.Entity("Domain.Entities.Blog", b =>
                {
                    b.HasOne("Domain.Entities.BlogCategory", "BlogCategory")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogCategory");
                });

            modelBuilder.Entity("Domain.Entities.Demo", b =>
                {
                    b.HasOne("Domain.Entities.Artist", "Artist")
                        .WithMany("Demos")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Category", "Category")
                        .WithMany("Demos")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("Domain.Entities.EmailAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("EmailAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.OtpAuthenticator", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("OtpAuthenticators")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.RealVoiceProject", b =>
                {
                    b.HasOne("Domain.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Demo", "Demo")
                        .WithMany()
                        .HasForeignKey("DemoId");

                    b.HasOne("Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UsageRight", "UsageRight")
                        .WithMany()
                        .HasForeignKey("UsageRightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Demo");

                    b.Navigation("Language");

                    b.Navigation("UsageRight");
                });

            modelBuilder.Entity("Domain.Entities.RefreshToken", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.UserOperationClaim", b =>
                {
                    b.HasOne("Domain.Entities.OperationClaim", "OperationClaim")
                        .WithMany()
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Artist", b =>
                {
                    b.Navigation("ArtistUsageRights");

                    b.Navigation("Demos");
                });

            modelBuilder.Entity("Domain.Entities.BlogCategory", b =>
                {
                    b.Navigation("Blogs");
                });

            modelBuilder.Entity("Domain.Entities.Category", b =>
                {
                    b.Navigation("Demos");
                });

            modelBuilder.Entity("Domain.Entities.ToneCategory", b =>
                {
                    b.Navigation("Artists");
                });

            modelBuilder.Entity("Domain.Entities.UsageRight", b =>
                {
                    b.Navigation("ArtistUsageRights");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("EmailAuthenticators");

                    b.Navigation("OtpAuthenticators");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserOperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
